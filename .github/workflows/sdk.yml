name: Build and Release SDK

on:
  push:
    branches: [ "windows-git" ]
    tags: "v*"
  pull_request:
    branches: [ "windows-git" ]

env:
  CARGO_TERM_COLOR: always

permissions:
  contents: write

jobs:
  build:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            binary_names: ['kanari']
            artifact_names: ['kanari-linux-x64']
          - os: macos-latest
            target: aarch64-apple-darwin
            binary_names: ['kanari']
            artifact_names: ['kanari-macos-arm64']

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: 'recursive'  # Add this to fetch submodules
        
    - name: Cache Rust dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Install Linux dependencies
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          cmake \
          gcc \
          libssl-dev \
          pkg-config \
          libclang-dev \
          protobuf-compiler \
          lld \
          clang

    - name: Install macOS dependencies
      if: matrix.os == 'macos-latest'
      run: |
        brew install openssl@3
        brew install pkg-config
        brew install protobuf
        which protoc
        protoc --version

    - name: Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        target: ${{ matrix.target }}
        override: true
        
    - name: Set Rust environment variables
      shell: bash
      run: |
        if [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
          # Prevent using lld on Ubuntu if not properly configured
          echo "RUSTFLAGS=-C link-arg=-fuse-ld=gold" >> $GITHUB_ENV
        fi

    - name: Set Protoc Environment Variables
      run: |
        if [ "${{ matrix.os }}" = "macos-latest" ]; then
          echo "PROTOC=$(which protoc)" >> $GITHUB_ENV
        elif [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
          echo "PROTOC=$(which protoc)" >> $GITHUB_ENV
        fi
      shell: bash

    - name: Build
      run: cargo build --release --target ${{ matrix.target }} --verbose
      env:
        OPENSSL_DIR: ${{ matrix.os == 'macos-latest' && '/usr/local/opt/openssl@3' || (matrix.os == 'ubuntu-latest' && '/usr' || '') }}
        OPENSSL_LIB_DIR: ${{ matrix.os == 'macos-latest' && '/usr/local/opt/openssl@3/lib' || (matrix.os == 'ubuntu-latest' && '/usr/lib/x86_64-linux-gnu' || '') }}
        OPENSSL_INCLUDE_DIR: ${{ matrix.os == 'macos-latest' && '/usr/local/opt/openssl@3/include' || (matrix.os == 'ubuntu-latest' && '/usr/include' || '') }}
        RUSTFLAGS: ${{ env.RUSTFLAGS }}
        LIBGIT2_SYS_USE_PKG_CONFIG: 1

    - name: Debug binary location
      run: ls -la target/${{ matrix.target }}/release/

    - name: Compress artifacts
      run: |
        cd target/${{ matrix.target }}/release
        tar -czf ${{ matrix.artifact_names[0] }}.tar.gz ${{ matrix.binary_names[0] }}

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_names[0] }}
        path: target/${{ matrix.target }}/release/${{ matrix.artifact_names[0] }}.*
        retention-days: 5

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: artifacts
          pattern: kanari-*
          merge-multiple: true
  
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            artifacts/kanari-linux-x64.tar.gz
            artifacts/kanari-macos-arm64.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}